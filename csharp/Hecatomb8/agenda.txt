
C:\Users\infin\OneDrive\Documents\GitHub\hecatomb\csharp\Hecatomb8
gci . *.cs -Recurse | select-string . | Group Filename | Measure-Object Count -Sum -Min -Max -Average


So what would our approach be to refactoring the game?  Let's make this a wishlist.
- I think you basically just start by backing up Game.cs, start that again from scratch, and go from there.
- Let's take a look at this example code.  So, they've got a Global object.
- So what is it I'm actually looking to improve on here?
	- I want to take full advantage of the new null protections.
	- I want to totally shut down race conditions.
	- In my dreams, I log all game and interface events.
		- It's clear what a game event is.  An interface event is a little less clear.
	- I could try improve on some of the more intricate systems, like spawning, serializing, events, and so on.
	- I have some specific things I want to change, like getting rid of the JSON-loading text-key nonsnese.


4/14/2020

So we have the "minimal MCV" thing down now.  So what's next?
- We want to generate the world
- We want to implement the normal controls

4/18/2020

Things are kind of a little bit recognizable, in that we have a panel handling the drawing, the ability to run around on the surface, and glyphs that look kind of okay.
So what are some upcoming chunks of functionality to add?
- I think I want to start by - instead of adding fun stuff - set up the general "game" structure.
- Then work on the turn structure.
- I think we want to save Tasks and Components as long as possible.  Those are by far where the most screw-ups happen.  Hopefully that's where all the groundwork
I'm laying pays off.

4/19/2020

Okay, I schlepped for a bit.  I really actually kind of want to go outside.
Alright, what's next?  Let's toss some ideas out there...
 - Camera mode.
 - Get trees and graves up in there.
 - Cast spells to summon zombies.
 - Zombies wander around and pathfind.
 - Set up the "new game" framework.  Yeah...let's get that going.

 4/20/2020
 Alright, so I have time passing...but I think I may have noticed a weakness in the system...
 ...ready for input can be triggered by input, but it can also be triggered by time passing...is that a real issue?
 ...I think maybe not, because I doubt the update loops can overlap, and the time passing portion of the loop always completes before the input portion of the loop, right?


 4/23/2020
 - Particles are buggy in some weird way, but I bet I can fix that later.  Right now they work kinda, and I want to get Save and Restore Game imeplemented.
 - Alright, so in theory I've implemented saving and restoring games.  But we all know in practice when I run this, a bunch of stuff is going to go wrong.
    - First off, there will probably be at least a few straight-up crashes, some related to null references and others related to...well...Json null references.
    - Second, there definitely be serialization problems, were the state doesn't get serialized the way you'd hope it would.  In fact, I realized I totally don't parse Entities correctly; they need to pick class based on a field.
 - But I don't know that I want to tackle all that tonight.  It's already eight and there's a couple of other projects I'm thinking of tackling.
 - Lets talk about some other pockets of functionality:
    - Serialization.
    - Fleshing out the interface.
    - Tasks and Actors
    - Tutorial
    - Restoring content
    - Structures
- Maybe tonight let's try to hunt down the particles issue

4/26/2020
- Okay, so we've got a good portion of the interface stuff done.  Ummm....MessageHandler next?