- research still shows ingredients when noingredients is enabled
- furnishing should try to add production tasks...unless we simplify this even further by making it so those things get built like ramps do and just have prereqs.  But in that case, how much production actually happens?
- is the number of "spider failed to acts" unreasonably high?
- ore doesn't get stored anywhere
- you can kind of "cheat" and reveal unexplored terrain by seeing how DigTask assigns.  You could fight this by tagging the DigTask with the kind of terrain it's supposed to be on.
- I bet this Guard Post rallying thing is less flexible than you'd want...also, minions probably run outside the radius when facing threats.
- The way spells you can't cast are displayed is not consistent with ingredient deficits.
- Soil types break aquifers, currently.  Aquifers should be their own cover, I think.
- I don't think ore currently has hardness.
- I'm guessing that saved games are going to be hideously broken after all this refactoring.

- I don't hate the shape of herb patches, but I don't love it either.  Perlin worms might be better.
- Can I parameterize some of the randomized scattering?
- It's a pain to have to adjust nParcels every time...
- Should I be able to parameterize "SmallGraveyard", perhaps to make it not so small?  Right now it's a 3x3, 4 potential graves thing.
- The graveyard parcel is just like the player parcel but without the player, thus duplicating some code.
- It would be nice to have a unifying thing that kept stuff within bounds.
- The traps need to be invisible to other teams.
- The hunter probably needs missile weapons.
- The hunter is "human", but that's not a concept that exists right now.
- The hunter should sleep at night.

- what's next? ghoul dens?  crows?

- flocking
	- avoid crowding
	- go towards heading
	- go towards position

- probably want some method for masking, and bounding boxes
- red and black ants
- findPlace should handle Z differently
- ants get placed on the ground level with findplace
- ant colony entrance is usually in top left corner
- ant colony can overlap with graveyards and stuff
- ant queens are potentially a "master"...does that break any assumptions?
- is the spawn probability for seaweed too high?

- fireflies only come out at night?  and they should tend to fly low.

- maybe "Yield" values of <1 are a drop rate?  Yeah, I like that!

- starting locations and graveyards seem to break the rules sometimes
- Sometimes ant colonies end up underwater.
- map should maybe show cave levels.


So...I've been blocked on this monster variant issue for quite a while.  And I'm realizing that maybe that's in part because I'm mistaking several different problems for one unified thing.

So the basic issue is that we could have these sorts of things:
- Humans.
- Zombies.
- Zombie humans.
- Archers.
- Human archers.
- Zombie archer humans.
- Zombie archer human champions.
...and so on.

And I think there are actually three problems here:
1) One is how to structure these things, and I honestly think it's pretty straightforward:
- Everything has one and only one species, so that's the base template.
- "Zombie", "Archer", and "Champion" are a bit more complicated.
	- "Zombie" could be its own behavior, or it could be a modifier that adds behaviors such as "Decaying".  Likewise with "Archer" and "Champion"...some of those things definitely need to do more modifying attributes than adding behaviors.
	- So, "Zombie" could be a standardized "applicator" that attaches to whatever...or, "Elf Zombie" and "Goblin Zombie" could be prefab things; zombification could affect them differently.
2) In addition to that structure, we need a convenient way to make those things.  Arguably, you could do it with just "spawn()" arguments.
3) Finally, we need some way of flagging these things...how do we check whether a certain Elf is a Zombie?



Footprint.extend({
    template: "RuinedStructure",
    name: "ruined structure",
    structure: "Workshop",
    validPlace: function(x,y,z) {
      let s = HTomb.Things[this.structure];
      let dx = parseInt(s.width/2);
      let dy = parseInt(s.height/2);
      for (let i=x-dx; i<=x+dx; i++) {
        for (let j=y-dy; j<=y+dy; j++) {
          if (HTomb.World.tiles[z][i][j]!==HTomb.Tiles.FloorTile) {
            return false;
          // this check appears to fail at its purpose sometimes
          } else if (HTomb.World.features[coord(i,j,z)]) {
            return false;
          }
        }
      }
      return true;
    },




          let items = HTomb.World.items[coord(x,y,z)] || HTomb.Things.Items();
      for (let item of items) {
        item.owned = true;
      }
      HTomb.World.validate.cleanNeighbors(x,y,z);
      HTomb.World.validate.breach(x,y,z);
      let f = HTomb.World.features[coord(x,y,z)];
      // this fails sometimes?
      if (f) {
        f.remove();
        f.despawn();
      }

      Corpses stack wrong...2 peasant corpses on top of a human zombie corpse become "3 human zombie corpses".

      auto-claiming nearby rocks on start-up doesn't really accomplish what it should

      - some wood planks not getting moved to stockpile